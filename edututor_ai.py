# -*- coding: utf-8 -*-
"""EduTutor-AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o6kkq_SY7BhzwSFOd3BQSBl4OOyHA2yY
"""

!pip install transformers torch gradio -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# Load model and tokenizer ONCE
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)
tokenizer.pad_token = tokenizer.eos_token  # Ensure pad token is set

def generate_response(prompt, max_length=512):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.replace(prompt, "").strip()

def concept_explanation(concept):
    prompt = f"Explain the concept of {concept} in detail with examples:"
    return generate_response(prompt, max_length=800)

def quiz_generator(concept):
    prompt = f"Generate 5 quiz questions about {concept} with mixed types and an ANSWERS section:"
    return generate_response(prompt, max_length=1000)

css = """
body, .gradio-container {
    background: linear-gradient(135deg, #000000, #00ff00);
    color: white;
}

.gr-button {
    background-color: #00cc66 !important;
    color: white !important;
    font-weight: bold;
    transition: background-color 0.3s ease, transform 0.3s ease;
}

.gr-button:hover {
    background-color: #00ff88 !important;
    transform: scale(1.05);
}

.gr-textbox, .output-textbox {
    border-radius: 12px !important;
    padding: 15px !important;
    background: rgba(255, 255, 255, 0.15) !important;
    color: white !important;
    border: 1px solid rgba(255, 255, 255, 0.3) !important;
    backdrop-filter: blur(10px) !important;
    -webkit-backdrop-filter: blur(10px) !important;
    font-size: 1em !important;
    transition: background 0.3s ease, transform 0.3s ease;
}

.gr-textbox:hover, .output-textbox:hover {
    background: rgba(255, 255, 255, 0.25) !important;
    transform: translateY(-3px);
}

.gr-label {
    font-weight: bold;
    font-size: 1.1em;
    color: white;
}

footer {
    color: #00ff00;
    font-weight: bold;
}
"""

with gr.Blocks(css=css) as app:

    gr.Markdown("<h1 style='text-align: center; color: #00ff00;'>üß† Educational AI Assistant üß†</h1>")

    with gr.Tabs():
        with gr.TabItem("üìö Concept Explanation"):
            concept_input = gr.Textbox(label="Enter a concept", placeholder="e.g., machine learning", lines=1)
            explain_btn = gr.Button("Explain Concept")
            explanation_output = gr.Textbox(label="Explanation", lines=12, interactive=False, elem_classes="output-textbox")
            explain_btn.click(concept_explanation, inputs=concept_input, outputs=explanation_output)

        with gr.TabItem("üìù Quiz Generator"):
            quiz_input = gr.Textbox(label="Enter a topic", placeholder="e.g., physics", lines=1)
            quiz_btn = gr.Button("Generate Quiz")
            quiz_output = gr.Textbox(label="Quiz Questions", lines=15, interactive=False, elem_classes="output-textbox")
            quiz_btn.click(quiz_generator, inputs=quiz_input, outputs=quiz_output)

    gr.Markdown("<footer style='text-align:center; padding:10px;'>üöÄ Powered by IBM Granite LLM & Gradio</footer>")

app.launch(share=True)